<?php

/**
 * @file
 * Module implementing extensions of Deploy module.
 */

/**
 * Deployment statuses. DEL - Deploy Extra Log
 */
define('DEL_IMPORT_STATUS_PROCESSED', 0);
define('DEL_IMPORT_STATUS_SAVED', 1);
define('DEL_IMPORT_STATUS_UPDATED', 2);
define('DEL_IMPORT_STATUS_SKIPPED', 3);
define('DEL_IMPORT_STATUS_TEST_MODE', 4);
define('DEL_IMPORT_STATUS_FAILED', 5);

/**
 * Include the services hook implementations.
 */
module_load_include('inc', 'deploy_extra', 'deploy_extra.core');

/**
 * Implements hook_form_alter().
 */
function deploy_extra_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form_state['item']) && $form_id == 'ctools_export_ui_edit_item_wizard_form') {
    $plugin = $form_state['plugin'];

    // Make changes only for deployPlan and endPoint edit form.
    if (isset($plugin['schema']) && ($plugin['schema'] == 'deploy_plans' || $plugin['schema'] == 'deploy_endpoints')) {

      // Set weight property to locate our element after "debug" element.
      $n = 1;
      foreach ($form as $name => &$el) {
        if (!strstr($name, '#') && !isset($el['#weight']) && isset($el['#weight']) && $el['#type'] != 'hidden' && $el['#type'] != 'value') {
          $el['#weight'] = $n;
          $n += 3;
        }
      }
    }
  }
}

/**
 * Implements hook_deploy_services().
 */
function deploy_extra_deploy_services() {
  $path = drupal_get_path('module', 'deploy_extra') . '/plugins';
  return array(
    'DeployServiceRestJsonAdv' => array(
      'name' => 'REST JSON advanced',
      'description' => 'Same as the REST JSON service + additional logging capabilities and test mode',
      'handler' => array(
        'class' => 'DeployServiceRestJsonAdv',
        'file' => 'DeployServiceRestJsonAdv.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * helper function for logging of import entities process
 *
 * @param string $deployment_uuid
 * The UUID of deployment
 *
 * @param string $entity_uuid
 * The UUID of import entity
 *
 * @param string $entity_type
 * The type of import entity
 *
 * @param integer $status
 * The status of import entity, sed define above
 *
 * @param string $entity_vuuid
 * The UUID of entity revision if it exists
 *
 * @param string $message
 * The message for logging
 */

function _deploy_extra_import_log($deployment_uuid, $entity_uuid, $entity_type, $status = 0, $data = array(), $entity_vuuid = NULL) {

  // @TODO need to add function to transform $data array to $message string
  $message = NULL;
  if(isset($data['message'])) {
    $message = $data['message'];
  }

  $keys = array(
    'deployment_uuid' => $deployment_uuid,
    'entity_uuid' => $entity_uuid,
  );
  $fields = array(
    'deployment_uuid' => $deployment_uuid,
    'entity_uuid' => $entity_uuid,
    'entity_type' => $entity_type,
    'status' => $status,
    'timestamp' => time(),
    'data' => !empty($data) ? serialize($data) : NULL,
    'message' => $message,
  );

  if ($entity_vuuid) {
    $keys['entity_vuuid'] = $entity_vuuid;
    $fields['entity_vuuid'] = $entity_vuuid;
  }

  db_merge('deploy_extra_import_log')
    ->key($keys)
    ->fields($fields)
    ->execute();
}

/**
 * @TODO add the proper description
 */

function deploy_extra_import_log_status($deployment_uuid, $entity_uuid, $entity_type, $status, $data = array(), $entity_vuuid = NULL) {
  _deploy_extra_import_log($deployment_uuid, $entity_uuid, $entity_type, $status, $data, $entity_vuuid);
}

/**
 * @TODO add the proper description
 */

function deploy_extra_import_log($deployment_uuid, $entity_uuid, $entity_type, $data = array(), $entity_vuuid = NULL) {
  $status = DEL_IMPORT_STATUS_PROCESSED;
  _deploy_extra_import_log($deployment_uuid, $entity_uuid, $entity_type, $status, $data, $entity_vuuid);
}